use 'std'
use 'type'
use 'math'

# sort
def insertion_sort(a n):

	for i = 1, i < n, ++i :
		x = a[i]
		j = i - 1
		
		while x < a[j] :
			a[j + 1] = a[j]
			j = j - 1
		end

		a[j+1] = x
	end

	return a
end

def bubble_sort(a n) :
	for i = 0, i < n-1, ++i :
		changed = false
		for j = 0, j < n-i-1, ++j :
			if(a[j] > a[j + 1])
				b = a[j]
				a[j] = a[j+1]
				a[j+1] = b
				changed = true
			end
		end
		if(!changed)
			break
		end
	end
	return a
end

def selection_sort(a n):
	for(i = 0, i < n, ++i):
		k = i
		x = a[i]
		for(j = i + 1, j < n, ++j):
			if a[j] < x
				k = j
				x = a[j]
			end
		end
		a[k] = a[i]
		a[i] = x
	end
	return a
end

def square(x) <- x*x

def cube(x) <- x*x*x

def sum(x):
	result = 0
	for i = 1, i <= x, ++i
		result += i
	return result;
end

def sumOfCubes(x):
	result = 0
	for (i = 1, i <= x, ++i)
		result += cube(i)
	return result
end

def isPrime(x):
	for (i = 2, i <= to_i(sqrt(x)), ++i)
		if (x % i == 0)
			return false
		end
	return true
end

def getPrime(x):
	count = 0
	candidate = 2
	while count != x :
		if (isPrime(candidate))
			++count
		end
	end
	return candidate
end

get_random_nums = def(min max nums):
	arr = newArray(nums)
	for i = 0, i < nums, ++i :
		x = rand(min max)
		if not x in arr
			arr[i] = x
		else
			--i continue
		end
	end
	return arr
end

arr = get_random_nums(1 50 40)

# sort = insertion_sort(arr len(arr))
sort = bubble_sort(arr len(arr))
# sort = selection_sort(arr len(arr))
print sort

print ''
print 'square(3)     = ' + square(3)
print 'cube(3)       = ' + cube(3)
print 'sum(3)        = ' + sum(3)
print 'sumOfCubes(3) = ' + sumOfCubes(3)
print 'getPrime(3)   = ' + getPrime(3)
print ''

print to_i('1') * 5
print to_s(1) * 5
print to_a(1) * 5

print 0121

use 'std'
mode '0x666'

$operations = [
	{"+" : def(a b) = a + b}
	{"-" : def(a b) = a - b}
	{"*" : def(a b) = a * b}
	{"/" : def(a b) = a / b}
	{"%" : def(a b) = a % b}
	{"&" : def(a b) = a & b}
	{"|" : def(a b) = a | b}
	{"^" : def(a b) = a ^ b}
]

def call_operations(a b):
	print ''
	for elem in $operations :
		for key, operation in elem:
			print a + ' ' + key + ' ' + b + ' = ' + operation(a b)
		end
	end
	print ''
end

print "Binary operations with:"
# number
def_c number():
	print "numbers"
	call_operations(10 4)
end

# array
def_c array():
	print "array:"
	arr1 = [1, 2]
	arr2 = [6, 7]
	
	call_operations(arr1 arr2)

	# print arr + arr2
	# print arr2 + arr
	# print arr + "\n"
	# print 5 >> arr
	# print arr << 7
	# print arr
end

# map
def_c map():
	print "\nmap:"
	
	map = {k1: 4 k2: 2}
	print map + 2
end

def_c bitwise():
	for a = 0, a <= 1, a++ :
		for b = 0, b <= 1, b++ :
			fprint(a, " | ", b, " = ", a | b)
			fprint(a, " & ", b, " = ", a & b)
			fprint(a, " ^ ", b, " = ", a ^ b)
		end
		fprint("     ~", a, " ", ~a)
		fprint("     !", a, "  ", !a "\n")
	end
end

number()
array()
# map()
bitwise()
use 'std'
# mode '0x666'

$operations = {
	"+" : def(a b) <- a + b
	"-" : def(a b) <- a - b
	"*" : def(a b) <- a * b
	"/" : def(a b) <- a / b
	"%" : def(a b) <- a % b
	"&" : def(a b) <- a & b
	"|" : def(a b) <- a | b
	"^" : def(a b) <- a ^ b
	"<<" : def(a b) <- a << b
	">>" : def(a b) <- a >> b
}

def call_operations(ops a b):
	def print_op(a, b, op):
		echo(a, ' ', op, ' ', b, ' = ', $operations[op](a b))
	end

	if '' in ops
		for key, operation in $operations:
			print_op(a, b, key)
		end
	else
		for op in ops :
			match op
				case '+': print_op(a, b, op)
				case '-': print_op(a, b, op)
				case '*': print_op(a, b, op)
				case '/': print_op(a, b, op)
				case '%': print_op(a, b, op)
				case '&': print_op(a, b, op)
				case '|': print_op(a, b, op)
				case '^': print_op(a, b, op)
				case '<<': print_op(a, b, op)
				case '>>': print_op(a, b, op)
			end
		end
	end

	print ''
end

print "Binary operations with: \n"
# number
def number():
	print "Numbers"
	call_operations([''] 10 4)
end

# array
def array():
	print "Array"
	arr1 = [1, 2]
	arr2 = [6, 7]

	call_operations(['+' '>>' ] arr1 arr2)

end

# map
def map():
	print "\nMap:"

	map = {
		'k1': 4
		'k2': 2
	}

	print map + 2	
end

def bitwise():
	print "\nBitwise"
	for a = 0, a <= 1, a++ :
		for b = 0, b <= 1, b++ :
			echo(a, " | ", b, " = ", a | b)
			echo(a, " & ", b, " = ", a & b)
			echo(a, " ^ ", b, " = ", a ^ b)
		end
		echo("     ~", a, " ", ~a)
		echo("     !", a, "  ", !a "\n")
	end
end

number()
array()
# map()
bitwise()